import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest
import re
import os
import socket

from config import BOT_TOKEN
from session_manager import SessionManager, UserState, GenerationMode, PostSize
from llm_client import LLMClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def debug_echo(message: Message):
    logger.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text if message.text else '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'}")
    try:
        await message.answer("–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞—é! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.")
        logger.info(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        logger.error(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π –∏ –∫–ª–∏–µ–Ω—Ç–∞ LLM
session_manager = SessionManager()
llm_client = LLMClient()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöÄ –ù–æ–≤—ã–π –ø–æ—Å—Ç"), KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")],
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
mode_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É", callback_data="mode:template")],
    [InlineKeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑ —à–∞–±–ª–æ–Ω–∞", callback_data="mode:no_template")]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å—Ç–∞
size_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç (200-400 —Å–∏–º–≤–æ–ª–æ–≤)", callback_data="size:small")],
    [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π –ø–æ—Å—Ç (400-800 —Å–∏–º–≤–æ–ª–æ–≤)", callback_data="size:medium")],
    [InlineKeyboardButton(text="–î–ª–∏–Ω–Ω—ã–π –ø–æ—Å—Ç (800-1200 —Å–∏–º–≤–æ–ª–æ–≤)", callback_data="size:large")]
])

# –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
SPECIAL_CHARS = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ md-—Ä–∞–∑–º–µ—Ç–∫–∏"""
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞—â–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–∞–∑–º–µ—Ç–∫—É
    # –ó–∞—â–∏—â–∞–µ–º **–∂–∏—Ä–Ω—ã–π**
    bold_pattern = r'(\*\*)(.*?)(\*\*)'
    protected_text = re.sub(bold_pattern, lambda m: f"BOLD_START{m.group(2)}BOLD_END", text)
    
    # –ó–∞—â–∏—â–∞–µ–º `–∫–æ–¥`
    code_pattern = r'(`)(.*?)(`)'
    protected_text = re.sub(code_pattern, lambda m: f"CODE_START{m.group(2)}CODE_END", protected_text)
    
    # –ó–∞—â–∏—â–∞–µ–º ```–±–ª–æ–∫ –∫–æ–¥–∞```
    code_block_pattern = r'(```)(.*?)(```)'
    protected_text = re.sub(code_block_pattern, lambda m: f"CODE_BLOCK_START{m.group(2)}CODE_BLOCK_END", protected_text)
    
    # –ó–∞—â–∏—â–∞–µ–º ~~–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π~~
    strike_pattern = r'(~~)(.*?)(~~)'
    protected_text = re.sub(strike_pattern, lambda m: f"STRIKE_START{m.group(2)}STRIKE_END", protected_text)
    
    # –ó–∞—â–∏—â–∞–µ–º ||—Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç||
    spoiler_pattern = r'(\|\|)(.*?)(\|\|)'
    protected_text = re.sub(spoiler_pattern, lambda m: f"SPOILER_START{m.group(2)}SPOILER_END", protected_text)
    
    # –ó–∞—â–∏—â–∞–µ–º [—Å—Å—ã–ª–∫–∞](URL)
    link_pattern = r'(\[)(.*?)(\])(\()(.*?)(\))'
    protected_text = re.sub(link_pattern, lambda m: f"LINK_TEXT_START{m.group(2)}LINK_TEXT_END{m.group(4)}LINK_URL{m.group(6)}", protected_text)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    for char in SPECIAL_CHARS:
        protected_text = protected_text.replace(char, f'\\{char}')
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É
    result = protected_text.replace("BOLD_START", "**").replace("BOLD_END", "**")
    result = result.replace("CODE_START", "`").replace("CODE_END", "`")
    result = result.replace("CODE_BLOCK_START", "```").replace("CODE_BLOCK_END", "```")
    result = result.replace("STRIKE_START", "~~").replace("STRIKE_END", "~~")
    result = result.replace("SPOILER_START", "||").replace("SPOILER_END", "||")
    result = result.replace("LINK_TEXT_START", "[").replace("LINK_TEXT_END", "]")
    result = result.replace("LINK_URL", "(").replace("(LINK_URL", "(")
    
    return result

def format_message_text(text):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Markdown –≤ Telegram"""
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –∏ —Å–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ HTML, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ MarkdownV2
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ```–±–ª–æ–∫ –∫–æ–¥–∞``` –≤ <pre>–±–ª–æ–∫ –∫–æ–¥–∞</pre>
    code_block_pattern = r'```(.*?)```'
    html_with_code_blocks = re.sub(code_block_pattern, r'<pre>\1</pre>', text, flags=re.DOTALL)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ||—Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç|| –≤ <tg-spoiler>—Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç</tg-spoiler>
    spoiler_pattern = r'\|\|(.*?)\|\|'
    html_text = re.sub(spoiler_pattern, r'<tg-spoiler>\1</tg-spoiler>', html_with_code_blocks)
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è Markdown-—Ä–∞–∑–º–µ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ MarkdownV2
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    markdown_types = ['**', '`', '~~', '[', ']', '(', ')']
    
    for md_type in markdown_types:
        html_text = html_text.replace(md_type, f'\\{md_type}')
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    for char in ['.', '!', '+', '-', '=', '>', '#', '|', '{', '}']:
        html_text = html_text.replace(char, f'\\{char}')
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Markdown-—Ä–∞–∑–º–µ—Ç–∫—É
    html_text = html_text.replace('\\*\\*', '**')
    html_text = html_text.replace('\\`', '`')
    html_text = html_text.replace('\\~\\~', '~~')
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫–∏
    link_pattern = r'\\\[\s*(.*?)\s*\\\]\\\(\s*(.*?)\s*\\\)'
    html_text = re.sub(link_pattern, r'[\1](\2)', html_text)
    
    return html_text

def format_to_html(text):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown-—Ä–∞–∑–º–µ—Ç–∫—É –≤ HTML –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Telegram"""
    # –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ HTML-—Å–∏–º–≤–æ–ª—ã
    html_text = text.replace('&', '&amp;')
    html_text = html_text.replace('<', '&lt;').replace('>', '&gt;')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
    placeholders = {}
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    def placeholder(match, prefix):
        nonlocal placeholders
        content = match.group(1)
        placeholder_id = f"__{prefix}_{len(placeholders)}__"
        placeholders[placeholder_id] = content
        return placeholder_id
    
    # –ó–∞–º–µ–Ω—è–µ–º Markdown –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    # **–∂–∏—Ä–Ω—ã–π** -> __bold_0__
    bold_pattern = r'\*\*(.*?)\*\*'
    html_text = re.sub(bold_pattern, lambda m: placeholder(m, "bold"), html_text)
    
    # `–∫–æ–¥` -> __code_0__
    code_pattern = r'`(.*?)`'
    html_text = re.sub(code_pattern, lambda m: placeholder(m, "code"), html_text)
    
    # ```–±–ª–æ–∫ –∫–æ–¥–∞``` -> __codeblock_0__
    code_block_pattern = r'```(.*?)```'
    html_text = re.sub(code_block_pattern, lambda m: placeholder(m, "codeblock"), html_text, flags=re.DOTALL)
    
    # ~~–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π~~ -> __strike_0__
    strike_pattern = r'~~(.*?)~~'
    html_text = re.sub(strike_pattern, lambda m: placeholder(m, "strike"), html_text)
    
    # ||—Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç|| -> __spoiler_0__
    spoiler_pattern = r'\|\|(.*?)\|\|'
    html_text = re.sub(spoiler_pattern, lambda m: placeholder(m, "spoiler"), html_text)
    
    # [—Å—Å—ã–ª–∫–∞](URL) -> __link_0__
    link_pattern = r'\[(.*?)\]\((.*?)\)'
    
    def link_placeholder(match):
        text = match.group(1)
        url = match.group(2)
        placeholder_id = f"__link_{len(placeholders)}__"
        placeholders[placeholder_id] = (text, url)
        return placeholder_id
    
    html_text = re.sub(link_pattern, link_placeholder, html_text)
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞ HTML-—Ç–µ–≥–∏
    for placeholder_id, content in placeholders.items():
        if placeholder_id.startswith("__bold_"):
            html_text = html_text.replace(placeholder_id, f"<b>{content}</b>")
        elif placeholder_id.startswith("__code_"):
            html_text = html_text.replace(placeholder_id, f"<code>{content}</code>")
        elif placeholder_id.startswith("__codeblock_"):
            html_text = html_text.replace(placeholder_id, f"<pre>{content}</pre>")
        elif placeholder_id.startswith("__strike_"):
            html_text = html_text.replace(placeholder_id, f"<s>{content}</s>")
        elif placeholder_id.startswith("__spoiler_"):
            html_text = html_text.replace(placeholder_id, f"<tg-spoiler>{content}</tg-spoiler>")
        elif placeholder_id.startswith("__link_"):
            text, url = content
            html_text = html_text.replace(placeholder_id, f'<a href="{url}">{text}</a>')
    
    return html_text

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
    await start_session(message)

@router.message(lambda msg: msg.text == "üöÄ –ù–æ–≤—ã–π –ø–æ—Å—Ç")
async def btn_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤—ã–π –ø–æ—Å—Ç'"""
    await start_session(message)

async def start_session(message: Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    user_id = message.from_user.id
    session_manager.reset_session(user_id)
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø AI SMM –ü–æ–º–æ—â–Ω–∏–∫, –∏ —è —Å–æ–∑–¥–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ—Ç –†–î–î–ú.",
        reply_markup=main_keyboard
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:",
        reply_markup=mode_keyboard
    )

@router.callback_query(lambda c: c.data.startswith("mode:"))
async def process_mode_selection(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    user_id = callback_query.from_user.id
    selected_mode = callback_query.data.split(":")[1]
    
    if selected_mode == "template":
        mode = GenerationMode.TEMPLATE
        session_manager.update_session(
            user_id, 
            mode=mode,
            state=UserState.WAITING_FOR_TEMPLATE
        )
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        await callback_query.message.edit_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —à–∞–±–ª–æ–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞."
        )
    else:
        mode = GenerationMode.NO_TEMPLATE
        session_manager.update_session(
            user_id, 
            mode=mode,
            state=UserState.WAITING_FOR_TOPIC
        )
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        await callback_query.message.edit_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ —à–∞–±–ª–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞."
        )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –¥–æ –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith("size:"))
async def process_size_selection(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å—Ç–∞"""
    user_id = callback_query.from_user.id
    selected_size = callback_query.data.split(":")[1]
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å—Ç–∞
    if selected_size == "small":
        post_size = PostSize.SMALL
    elif selected_size == "medium":
        post_size = PostSize.MEDIUM
    else:
        post_size = PostSize.LARGE
    
    session = session_manager.get_session(user_id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä –ø–æ—Å—Ç–∞: {post_size} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    session_manager.update_session(
        user_id,
        post_size=post_size,
        state=UserState.IDLE
    )
    
    # –í–∞–∂–Ω–æ: –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É, –¥–æ –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await callback_query.answer()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    status_message = await callback_query.message.edit_text("–ü–æ–Ω—è–ª! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –ø–æ—Å—Ç...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if session.mode == GenerationMode.TEMPLATE:
            generated_post = await llm_client.generate_from_template(
                template_post=session.template_post, 
                topic=session.topic,
                post_size=post_size,
                language=session.language
            )
        else:
            generated_post = await llm_client.generate_without_template(
                topic=session.topic,
                post_size=post_size,
                language=session.language
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
        session_manager.update_session(user_id, current_post=generated_post)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await status_message.edit_text("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        try:
            html_text = format_to_html(generated_post)
            await callback_query.message.answer(html_text, parse_mode="HTML")
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML: {e}")
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback_query.message.answer(generated_post)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ—Å—Ç–æ–º
        actions_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç", callback_data="action:edit")],
            [InlineKeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="action:new")]
        ])
        
        await callback_query.message.answer(
            "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
            reply_markup=actions_keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        await status_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å—Ç–∞."
        )

@router.callback_query(lambda c: c.data.startswith("action:"))
async def process_post_action(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ—Å—Ç–æ–º"""
    action = callback_query.data.split(":")[1]
    
    if action == "edit":
        await cmd_change(callback_query.message, callback_query.from_user.id)
    elif action == "new":
        await start_session(callback_query.message)
    
    await callback_query.answer()

@router.message(Command("change"))
async def cmd_change_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /change"""
    await cmd_change(message, message.from_user.id)

@router.message(lambda msg: msg.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
async def btn_change(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å'"""
    await cmd_change(message, message.from_user.id)

async def cmd_change(message: Message, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
    session = session_manager.get_session(user_id)
    
    if not session.current_post:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ—Å—Ç.",
            reply_markup=main_keyboard
        )
        return
    
    session_manager.update_session(user_id, state=UserState.WAITING_FOR_CHANGES)
    
    session_manager.update_session(user_id, chat_id=message.chat.id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    try:
        html_text = format_to_html(session.current_post)
        post_message = await message.answer(f"–¢–µ–∫—É—â–∏–π –ø–æ—Å—Ç:\n\n{html_text}", parse_mode="HTML")
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML: {e}")
        post_message = await message.answer(f"–¢–µ–∫—É—â–∏–π –ø–æ—Å—Ç:\n\n{session.current_post}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º –ø–æ—Å—Ç–æ–º
    session_manager.update_session(user_id, current_post_message_id=post_message.message_id)
    
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏.")

@router.message()
async def process_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    session = session_manager.get_session(user_id)
    
    if session.state == UserState.WAITING_FOR_TEMPLATE:
        # –ü–æ–ª—É—á–µ–Ω —à–∞–±–ª–æ–Ω, —Ç–µ–ø–µ—Ä—å –∂–¥–µ–º —Ç–µ–º—É
        session_manager.update_session(
            user_id,
            template_post=message.text,
            state=UserState.WAITING_FOR_TOPIC
        )
        
        await message.answer(
            "‚úÖ –®–∞–±–ª–æ–Ω –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞."
        )
    
    elif session.state == UserState.WAITING_FOR_TOPIC:
        # –ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ–º–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å—Ç–∞
        session_manager.update_session(
            user_id,
            topic=message.text,
            state=UserState.WAITING_FOR_POST_SIZE
        )
        
        await message.answer(
            "‚úÖ –¢–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å—Ç–∞:",
            reply_markup=size_keyboard
        )
    
    elif session.state == UserState.WAITING_FOR_CHANGES:
        if session.current_post_message_id and session.chat_id:
            try:
                await bot.delete_message(
                    chat_id=session.chat_id,
                    message_id=session.current_post_message_id
                )
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                session_manager.update_session(user_id, current_post_message_id=None)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        status_message = await message.answer("‚è≥ –í–Ω–æ—à—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ—Å—Ç...")
        
        try:
            modified_post = await llm_client.modify_post(
                session.current_post,
                message.text,
                language=session.language
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç
            session_manager.update_session(
                user_id,
                current_post=modified_post,
                state=UserState.IDLE
            )
            
            # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await status_message.edit_text("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
            try:
                html_text = format_to_html(modified_post)
                await message.answer(html_text, parse_mode="HTML")
            except TelegramBadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML: {e}")
                await message.answer(modified_post)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            actions_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="action:edit")],
                [InlineKeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="action:new")]
            ])
            
            await message.answer(
                "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
                reply_markup=actions_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            await status_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π."
            )

async def test_api_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        logger.info("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.wait_for –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        import asyncio
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10 —Å–µ–∫—É–Ω–¥
            await asyncio.wait_for(
                llm_client.generate_without_template(
                    topic="—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                    post_size=PostSize.SMALL
                ), 
                timeout=10.0
            )
            
            logger.info("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
        except asyncio.TimeoutError:
            logger.error("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç (10 —Å–µ–∫—É–Ω–¥)")
            return False
    except Exception as e:
        logger.error(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è webhook —Ä–µ–∂–∏–º–∞
webhook_path = None
app = None

async def setup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –Ω–∞ Railway
        is_railway = os.environ.get("RAILWAY_ENVIRONMENT") is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        handlers_count = len(dp.handlers.values())
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ: {handlers_count}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        for router_key, router in dp.routers.items():
            router_handlers = len(router.handlers) if hasattr(router, "handlers") else 0
            logger.info(f"–†–æ—É—Ç–µ—Ä {router_key}: {router_handlers} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        @dp.message()
        async def echo_handler(message: Message):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
            try:
                await message.answer("–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        logger.info("–£–¥–∞–ª—è–µ–º webhook...")
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            
            # –î–µ–ª–∞–µ–º –¥–≤–æ–π–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ webhook —Ç–æ—á–Ω–æ —É–¥–∞–ª–µ–Ω
            webhook_info = await bot.get_webhook_info()
            if webhook_info.url:
                logger.warning(f"Webhook –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω: {webhook_info.url}. –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å–Ω–æ–≤–∞...")
                await bot.delete_webhook(drop_pending_updates=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API
        try:
            api_status = await test_api_connection()
            if not api_status:
                logger.warning("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: {e}")
        
        if is_railway:
            # –ù–∞ Railway –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook
            logger.info("–ó–∞–ø—É—Å–∫ –Ω–∞ Railway, –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è webhook
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ–º–µ–Ω–∞ Railway
                railway_domain_vars = [
                    "RAILWAY_PUBLIC_DOMAIN",
                    "RAILWAY_STATIC_URL",
                    "RAILWAY_DOMAIN",
                    "RAILWAY_SERVICE_NAME"
                ]
                
                webhook_host = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã Railway
                for var in railway_domain_vars:
                    if os.environ.get(var):
                        value = os.environ.get(var)
                        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∑ –¥–æ–º–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω Railway
                        if not value.startswith("http") and "." not in value:
                            value = f"{value}.up.railway.app"
                        
                        webhook_host = value if value.startswith("http") else f"https://{value}"
                        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é {var} –¥–ª—è webhook: {webhook_host}")
                        break
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ URL Railway
                if not webhook_host and os.environ.get("RAILWAY_SERVICE_NAME"):
                    service_name = os.environ.get("RAILWAY_SERVICE_NAME")
                    # –®–∞–±–ª–æ–Ω URL –¥–ª—è Railway: https://–∏–º—è-—Å–µ—Ä–≤–∏—Å–∞.up.railway.app
                    webhook_host = f"https://{service_name}.up.railway.app"
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω Railway –ø–æ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–∏—Å–∞: {webhook_host}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç–Ω–æ–µ –∏–º—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ URL Railway
                if not webhook_host and os.environ.get("RAILWAY_PROJECT_NAME"):
                    project_name = os.environ.get("RAILWAY_PROJECT_NAME")
                    # –®–∞–±–ª–æ–Ω URL –¥–ª—è Railway –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
                    webhook_host = f"https://{project_name}.up.railway.app"
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω Railway –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞: {webhook_host}")
                
                # –°–º–æ—Ç—Ä–∏–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Railway PUBLIC_URL
                if not webhook_host and os.environ.get("PUBLIC_URL"):
                    webhook_host = os.environ.get("PUBLIC_URL")
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é PUBLIC_URL: {webhook_host}")
                
                # –ï—Å–ª–∏ –≤—Å—ë –µ—â–µ –Ω–µ—Ç URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ö–æ—Å—Ç–∞ –ø–ª—é—Å –ø–æ—Ä—Ç
                if not webhook_host:
                    import socket
                    try:
                        hostname = socket.gethostname()
                        # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—Ç –≤ webhook URL, —Ç–∞–∫ –∫–∞–∫ Telegram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç—ã 80, 88, 443 –∏–ª–∏ 8443
                        webhook_host = f"https://{hostname}"
                        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é hostname: {webhook_host}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ hostname: {e}")
                        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL
                        webhook_host = "https://rddm-bot.up.railway.app"
                        logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É—é —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL: {webhook_host}")
                
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç
                if ":" in webhook_host and any(p in webhook_host for p in ["8080", "8000", "3000"]):
                    # –£–¥–∞–ª—è–µ–º –ø–æ—Ä—Ç –∏–∑ URL
                    webhook_host = webhook_host.split(":")[0] + ("" if webhook_host.startswith("https") else ":443")
                    logger.info(f"–£–¥–∞–ª–µ–Ω –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç –∏–∑ URL: {webhook_host}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ URL —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                if not webhook_host.startswith("http"):
                    webhook_host = "https://" + webhook_host
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ URL: {webhook_host}")
                
                global webhook_path
                webhook_path = f"/webhook/{BOT_TOKEN}"
                webhook_url = f"{webhook_host}{webhook_path}"
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
                logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook –Ω–∞ {webhook_url}")
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –¥–æ–º–µ–Ω
                try:
                    import socket
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ URL
                    domain = webhook_host.replace("https://", "").replace("http://", "").split("/")[0]
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞ {domain}...")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ–º–µ–Ω
                    socket.gethostbyname(domain)
                    logger.info(f"–î–æ–º–µ–Ω {domain} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω!")
                except Exception as e:
                    logger.error(f"–î–æ–º–µ–Ω {domain} –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è: {e}")
                    # –ï—Å–ª–∏ –¥–æ–º–µ–Ω –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    webhook_host = "https://refreshing-commitment.up.railway.app"
                    webhook_url = f"{webhook_host}{webhook_path}"
                    logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É—é —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL Railway –∏–∑ –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏: {webhook_host}")
                
                try:
                    await bot.set_webhook(url=webhook_url)
                    logger.info("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                except Exception as e:
                    # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞, –µ—Å–ª–∏ webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
                    logger.warning("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –±–µ–∑ webhook. –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É —Å Telegram, –Ω–æ —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è webhook —Ä–µ–∂–∏–º–∞
            return True
        
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ - False
        return False
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ setup(): {e}")
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫
        return True

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
    # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logging.basicConfig(level=logging.INFO, 
                       format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    logger.info("===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
    is_railway = os.environ.get("RAILWAY_ENVIRONMENT") is not None
    logger.info(f"–ó–∞–ø—É—Å–∫ –Ω–∞ Railway: {is_railway}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Railway
    logger.info("=== Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===")
    for key, value in sorted(os.environ.items()):
        if "RAILWAY" in key or "URL" in key or "DOMAIN" in key or "HOST" in key:
            # –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏
            if any(secret in key.lower() for secret in ["token", "key", "secret", "password", "auth"]):
                value = value[:10] + "..." if value and len(value) > 10 else value
            logger.info(f"{key}: {value}")
    logger.info("===================================")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    force_polling = os.environ.get("FORCE_POLLING", "false").lower() == "true"
    if force_polling:
        logger.info("–†–µ–∂–∏–º FORCE_POLLING –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling –≤–º–µ—Å—Ç–æ webhook.")
        asyncio.run(main())
    elif is_railway:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º FastAPI –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ webhook —Ä–µ–∂–∏–º–µ
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –¥–ª—è webhook —Ä–µ–∂–∏–º–∞")
        from fastapi import FastAPI, Request, Response
        from fastapi.middleware.cors import CORSMiddleware
        import uvicorn
        
        app = FastAPI()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        
        # –û–±—ä—è–≤–ª—è–µ–º healthcheck —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º
        @app.get("/")
        async def root():
            return {"status": "ok", "mode": "webhook"}
        
        @app.post("/webhook/{token}")
        async def bot_webhook(request: Request, token: str):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å, —Ç–æ–∫–µ–Ω: {token[:5]}...")
            
            if token == BOT_TOKEN:
                try:
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
                    request_body = await request.json()
                    logger.info(f"Webhook –¥–∞–Ω–Ω—ã–µ: {request_body}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
                    await dp.feed_update(bot, request_body)
                    logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä")
                    
                    return Response(status_code=200)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook –∑–∞–ø—Ä–æ—Å–∞: {e}")
                    import traceback
                    logger.error(traceback.format_exc())
                    return Response(status_code=500)
            else:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º: {token[:5]}...")
                return Response(status_code=403)
        
        # –í—ã–Ω–æ—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É webhook –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        @app.on_event("startup")
        async def on_startup():
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É webhook –≤ —Ñ–æ–Ω–µ
            import asyncio
            asyncio.create_task(setup())
            logger.info("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä FastAPI
        port = int(os.environ.get("PORT", 8000))
        logger.info(f"–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        try:
            logger.info("–ó–∞–ø—É—Å–∫ uvicorn...")
            uvicorn.run(app, host="0.0.0.0", port=port)
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            import traceback
            logger.critical(f"–¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ä–µ–∂–∏–º–µ polling
        asyncio.run(main()) 