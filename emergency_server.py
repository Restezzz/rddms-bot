#!/usr/bin/env python
"""
–ê–≤–∞—Ä–∏–π–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Timeweb Cloud
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
"""
import sys
import logging
from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import os
import time
import signal

logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("emergency_server")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
try:
    from resource_monitor import monitor
    MONITOR_AVAILABLE = True
    logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError:
    MONITOR_AVAILABLE = False
    logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
PORT = int(os.environ.get("PORT", 8080))

class EmergencyHandler(BaseHTTPRequestHandler):
    """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        logger.info(f"{self.address_string()} - {format % args}")
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.path == "/monitor" and MONITOR_AVAILABLE:
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(monitor.get_status().encode())
            return
            
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –ø—É—Ç–∏
        if self.path == "/" or self.path == "/health":
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—É—Ç–∏
            response_data = {
                "status": "error",
                "mode": "emergency",
                "timestamp": int(time.time()),
                "message": "–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            try:
                import psutil
                response_data["system"] = {
                    "cpu_percent": psutil.cpu_percent(interval=0.5),
                    "memory_percent": psutil.virtual_memory().percent,
                    "memory_available_mb": round(psutil.virtual_memory().available / (1024 * 1024), 2)
                }
            except ImportError:
                pass
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ /reset, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–±—Ä–æ—Å–µ
            if self.path == "/reset":
                response_data["message"] = "–ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –±–æ—Ç –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ."
                logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-–æ—Ç–≤–µ—Ç
            self.wfile.write(json.dumps(response_data).encode())
        else:
            # –î–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø—É—Ç–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 404
            self.send_response(404)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = {"status": "error", "message": f"–ü—É—Ç—å {self.path} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            self.wfile.write(json.dumps(response).encode())

def run_emergency_server(port=PORT):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤–∞—Ä–∏–π–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if MONITOR_AVAILABLE:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ config
            admin_chat_id = os.environ.get("ADMIN_CHAT_ID")
            if not admin_chat_id:
                try:
                    from config import ADMIN_CHAT_ID
                    admin_chat_id = ADMIN_CHAT_ID
                except (ImportError, AttributeError):
                    admin_chat_id = None
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if admin_chat_id:
                monitor.admin_chat_id = admin_chat_id
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_chat_id}")
            
            monitor.start()
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º
            if admin_chat_id:
                try:
                    import asyncio
                    from telegram import Bot
                    from config import BOT_TOKEN
                    
                    async def send_emergency_notification():
                        bot = Bot(token=BOT_TOKEN)
                        message = "üö® –í–ù–ò–ú–ê–ù–ò–ï! –ë–æ—Ç –ø–µ—Ä–µ—à–µ–ª –≤ –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º!\n"
                        message += f"–í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                        message += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
                        await bot.send_message(chat_id=admin_chat_id, text=message)
                    
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(send_emergency_notification())
                    loop.close()
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")
        
        server = HTTPServer(('0.0.0.0', port), EmergencyHandler)
        logger.info(f"–ê–≤–∞—Ä–∏–π–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        def signal_handler(sig, frame):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
            server.server_close()
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server.serve_forever()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    logger.info("===== –ó–∞–ø—É—Å–∫ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ =====")
    run_emergency_server() 